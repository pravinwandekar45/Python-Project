What is this Contact Book Project?
Imagine you have a notebook (contact book) where you write down peopleâ€™s:
Name
Phone number
Email address


You want to:

Add new contacts
See all the contacts
Search for someone by name
Delete someoneâ€™s contact


Now instead of doing this on paper, weâ€™ll build it using Python and OOP (Object-Oriented Programming).


---

ðŸ§± Project is divided into two parts:

ðŸ”¹ 1. Contact (One person)

This is one contact â€” just like one page in your notebook.
We made a class called Contact to represent this.

class Contact:
    def _init_(self, name, phone, email):
        self.name = name
        self.phone = phone
        self.email = email

Each Contact object will hold one personâ€™s info.


---

ðŸ”¹ 2. ContactBook (Your full notebook)

This is your full contact book â€” a list of all people.

We use a class called ContactBook to manage it.

It can:

Add a contact â†’ adds a new page to the notebook

View all contacts â†’ flips through all pages

Search a contact â†’ finds a page by name

Delete a contact â†’ removes the page


self.contacts = []  # Think of this as the notebook (a list of Contact objects)

We add Contact objects to this list.


---

ðŸ§ª How It Works (Flow):

1. You run the program â†’ it shows you a menu:



1. Add Contact
2. View Contacts
3. Search Contact
4. Delete Contact
5. Exit

2. You choose an option:

Add â†’ it asks you for name, phone, email and saves it.

View â†’ it shows all saved contacts.

Search â†’ you enter a name, and it finds if someone exists.

Delete â†’ you give a name, and it removes that contact.

Exit â†’ stops the program.





---

ðŸ’¡ Real-Life Example:

Letâ€™s say:

You add: Raj â€“ 9876543210 â€“ raj@gmail.com

Then add: Neha â€“ 9011223344 â€“ neha@gmail.com


Now your contact book has 2 pages.

If you search for "Raj", it finds and shows Rajâ€™s details.
If you delete "Neha", sheâ€™s removed from the list.


---

ðŸ§  What You Learn:

Skill	How you used it

Class & Object	Contact and ContactBook
Constructor (_init_)	To set name, phone, email
Lists of objects	To store all contacts
Menu-driven program	while True + user input
OOP in real-world project	Managing data cleanly and modularly